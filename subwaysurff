import cv2
import mediapipe as mp

import numpy as np
from pynput.keyboard import Controller, Key
import time
import webbrowser

webbrowser.open("https://poki.com/en/g/subway-surfers")
time.sleep(5)  # Wait for browser and game to load

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(
    static_image_mode=False,
    max_num_hands=1,
    min_detection_confidence=0.7,
    min_tracking_confidence=0.7
)
mp_draw = mp.solutions.drawing_utils

# Initialize Keyboard Controller
keyboard = Controller()

# Main loop
cap = cv2.VideoCapture(0)
last_action_time = 0
action_cooldown = 0.5
last_action = None
action_duration = 0.5

def calculate_finger_angles(hand_landmarks):
    # Get coordinates of key landmarks for fingers
    thumb_tip = np.array([hand_landmarks.landmark[4].x, hand_landmarks.landmark[4].y])
    index_tip = np.array([hand_landmarks.landmark[8].x, hand_landmarks.landmark[8].y])
    middle_tip = np.array([hand_landmarks.landmark[12].x, hand_landmarks.landmark[12].y])
    wrist = np.array([hand_landmarks.landmark[0].x, hand_landmarks.landmark[0].y])
    
    # Calculate vectors
    thumb_vector = thumb_tip - wrist
    index_vector = index_tip - wrist
    middle_vector = middle_tip - wrist
    
    return thumb_vector, index_vector, middle_vector

def detect_gesture(hand_landmarks):
    thumb_vector, index_vector, middle_vector = calculate_finger_angles(hand_landmarks)
    
    # Calculate y-coordinates relative to wrist
    thumb_y = hand_landmarks.landmark[4].y - hand_landmarks.landmark[0].y
    index_y = hand_landmarks.landmark[8].y - hand_landmarks.landmark[0].y
    middle_y = hand_landmarks.landmark[12].y - hand_landmarks.landmark[0].y
    
    # Get x-coordinate of palm center
    palm_x = hand_landmarks.landmark[0].x
    
    # Define gestures
    if palm_x < 0.4:  # Hand on left side
        return "LEFT"
    elif palm_x > 0.6:  # Hand on right side
        return "RIGHT"
    elif index_y < -0.2 and middle_y < -0.2:  # Two fingers up
        return "UP"
    elif index_y > 0.2 and middle_y > 0.2:  # Two fingers down
        return "DOWN"
    
    return None

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to capture frame")
        break

    frame = cv2.flip(frame, 1)
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    
    # Process hand detection
    results = hands.process(rgb_frame)
    action = None

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            # Draw hand landmarks
            mp_draw.draw_landmarks(
                frame, 
                hand_landmarks, 
                mp_hands.HAND_CONNECTIONS
            )
            
            # Detect gesture
            action = detect_gesture(hand_landmarks)

    # Handle actions and simulate key presses
    current_time = time.time()
    if action and action != last_action and current_time - last_action_time > action_cooldown:
        print(f"Action performed: {action}")
        if action == "LEFT":
            keyboard.press(Key.left)
            keyboard.release(Key.left)
        elif action == "RIGHT":
            keyboard.press(Key.right)
            keyboard.release(Key.right)
        elif action == "UP":
            keyboard.press(Key.up)
            keyboard.release(Key.up)
        elif action == "DOWN":
            keyboard.press(Key.down)
            keyboard.release(Key.down)

        last_action_time = current_time
        last_action = action

    # Display current action
    if current_time - last_action_time <= action_duration:
        display_action = last_action
    else:
        display_action = "None"

    # Add gesture guide
    cv2.putText(frame, "Gesture Guide:", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
    cv2.putText(frame, "Left/Right: Move hand to sides", (10, 50), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
    cv2.putText(frame, "Up: Two fingers up", (10, 70), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
    cv2.putText(frame, "Down: Two fingers down", (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 0), 2)
    cv2.putText(frame, f"Current Action: {display_action}", (10, 120), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

    cv2.imshow("Subway Surfers Hand Controller", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()